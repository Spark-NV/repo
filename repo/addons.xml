<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<addons>
<addon id="script.module.cocoscrapers" name="CocoScrapers Module" version="1.0.37" provider-name="CocoJoe">
	<requires>
		<import addon="xbmc.python" version="3.0.0" />
		<import addon="script.module.requests" />
	</requires>
	<extension point="xbmc.python.pluginsource" library="lib/default.py">
		<provides>executable</provides>
	</extension> 
	<extension point="xbmc.service" library="lib/service.py" start="startup" />
	<extension point="xbmc.python.module" library="lib" />
	<extension point="xbmc.addon.metadata">
		<reuselanguageinvoker>false</reuselanguageinvoker>
		<summary lang="en">CocoScrapers Module</summary>
		<description>A module that can be used to provide site scrapers.</description>
		<platform>all</platform>
		<license>GNU GENERAL PUBLIC LICENSE. Version 3, 29 June 2007</license>
		<forum></forum>
		<website></website>
		<source></source>
		<disclaimer lang="en">The author is not responsible for the use of this addon. The author is not responsible for the content found using this addon. The author does not host or own any content found within this addon.[CR]The author is in no way affiliated with Kodi, Team Kodi, or the XBMC Foundation.[CR]This is a Non-profit resource, organized solely for educational purposes which is protected under the Fair-Use doctrine of the Copyright Act, Specifically section 107, which does promote freedom of expression, by permitting the unlicensed use of copyright-protected works.</disclaimer>
		<assets>
			<icon>icon.png</icon>
			<fanart>fanart.png</fanart>
			<screenshot></screenshot>
		</assets>
		<news></news>
	</extension>
</addon>
<addon id="script.globalsearch" name="Global Search" version="9.0.7" provider-name="ronie">
	<requires>
		<import addon="xbmc.python" version="3.0.0"/>
	</requires>
	<extension point="xbmc.python.script" library="default.py"/>
	<extension point="xbmc.addon.metadata">
		<summary lang="bg_BG">Търси в библиотеката Ви.</summary>
		<summary lang="ca_ES">Cerca a la teva biblioteca.</summary>
		<summary lang="cs_CZ">Hledej v knihovně</summary>
		<summary lang="de_DE">Durchsuchen Sie Ihre Bibliothek.</summary>
		<summary lang="el_GR">Αναζήτηση στη Συλλογή σας.</summary>
		<summary lang="en_GB">Search your library.</summary>
		<summary lang="en_NZ">Search your library.</summary>
		<summary lang="en_US">Search your library.</summary>
		<summary lang="es_ES">Busca en tu biblioteca.</summary>
		<summary lang="fr_FR">Chercher dans la médiathèque.</summary>
		<summary lang="fr_CA">Chercher dans votre bibliothèque</summary>
		<summary lang="gl_ES">Buscar a súa biblioteca.</summary>
		<summary lang="he_IL">חיפוש בספריית המדיה.</summary>
		<summary lang="hr_HR">Pretražite svoju zbirku.</summary>
		<summary lang="hu_HU">Keresés a médiatárban</summary>
		<summary lang="id_ID">Cari pustaka Anda.</summary>
		<summary lang="it_IT">Ricerca nella la tua libreria.</summary>
		<summary lang="ko_KR">라이브러리 찾기</summary>
		<summary lang="lt_LT">Ieškoti bibliotekoje.</summary>
		<summary lang="nl_NL">Zoek in je bibliotheek.</summary>
		<summary lang="nb_NO">Søk i biblioteket ditt</summary>
		<summary lang="pl_PL">Przeszukaj swoją bibliotekę</summary>
		<summary lang="pt_PT">Faça buscas na sua biblioteca.</summary>
		<summary lang="pt_BR">Pesquise sua coleção.</summary>
		<summary lang="ro_RO">Căutați în mediateca dumneavoastră.</summary>
		<summary lang="ru_RU">Поиск в вашей медиатеке.</summary>
		<summary lang="sl_SI">Iščite v svoji knjižnici.</summary>
		<summary lang="sv_SE">Sök i ditt bibliotek.</summary>
		<summary lang="tr_TR">Kitaplığını ara</summary>
		<summary lang="zh_CN">资料库搜索</summary>
		<description lang="bg_BG">Добавката може да намери всеки елемент във вашата видео и музикална библиотека.</description>
		<description lang="ca_ES">Aquest complement pot trobat qualsevol article en la teva biblioteca de vídeo i música</description>
		<description lang="cs_CZ">Tento dopněk dokáže najít libovolnou položku ve vaší audio a video knihovně.</description>
		<description lang="de_DE">Dieses Add-on kann jeden Eintrag in Ihrer Video- und Musikbibliothek finden.</description>
		<description lang="el_GR">Αυτό το πρόσθετο μπορεί να βρει κάθε αντικείμενο στις συλλογές σας.</description>
		<description lang="en_GB">This addon can find any item in your video and music library.</description>
		<description lang="en_NZ">This addon can find any item in your video and music library.</description>
		<description lang="en_US">This addon can find any item in your video and music library.</description>
		<description lang="es_ES">Este complemento puede encontrar cualquier elemento en tu biblioteca de vídeo y música.</description>
		<description lang="fr_FR">Cette extension peut trouver tout élément dans la vidéothèque et l'audiothèque.</description>
		<description lang="fr_CA">Cet addiciel peut trouver tout élément dans votre vidéothèque et dans votre audiothèque.</description>
		<description lang="gl_ES">Este complemento pode atopar calquera elemento na súa biblioteca de medios.</description>
		<description lang="he_IL">הרחבה זו יכולה למצוא כל פריט בספריות הווידאו והמוזיקה.</description>
		<description lang="hr_HR">Ovaj dodatak može pronaći svaku stavku u vašoj videoteci ili fonoteci.</description>
		<description lang="hu_HU">Ez a kiegészítő bármely elemet megtalálja a videó és audió médiatárban.</description>
		<description lang="id_ID">Addon ini dapat mencari item apa saja di pustaka video dan musik Anda.</description>
		<description lang="it_IT">Questo addon può trovare ogni elemento nella tua libreria video ed in quella musicale.</description>
		<description lang="ko_KR">비디오와 음악 라이브러리의 모든 항목을 검색합니다.</description>
		<description lang="lt_LT">Šis priedas gali rasti bet kokį elementą jūsų vaizdo ir garso bibliotekoje.</description>
		<description lang="nl_NL">Deze addon kan elk item in je video- en muziekbibliotheken vinden.</description>
		<description lang="nb_NO">Dette tillegget kan finne hva som helst i ditt film eller musikk bibliotek.</description>
		<description lang="pl_PL">Ten plugin może odnaleźć dowolną pozycję w twojej bibliotece wideo oraz muzycznej.</description>
		<description lang="pt_PT">Este addon pode encontrar qualquer item na sua biblioteca de vídeos e de músicas.</description>
		<description lang="pt_BR">Este addon pode encontrar qualquer item na sua coleção de vídeos e música.</description>
		<description lang="ro_RO">Acest supliment poate găsi orice element în mediateca dumneavoastră video și audio.</description>
		<description lang="ru_RU">Это дополнение поможет найти любую запись в вашей медиатеке.</description>
		<description lang="sl_SI">Ta dodatek lahko poišče katerokoli podatek v vaši knjižnici filmov in glasbe.</description>
		<description lang="sv_SE">Detta tillägg kan hitta vilket objekt som helst i ditt video och musikbibliotek.</description>
		<description lang="tr_TR">Bu eklenti video ve müzik kitaplığınızdaki herhangi bir öğeyi bulabilir.</description>
		<description lang="zh_CN">此插件搜索你的视频和音乐资料库项目。</description>
		<platform>all</platform>
		<license>GPL-2.0-only</license>
		<forum>https://forum.kodi.tv/showthread.php?tid=109301</forum>
		<source>https://gitlab.com/ronie/script.globalsearch/</source>
		<assets>
			<icon>resources/icon.png</icon>
			<fanart>resources/fanart.jpg</fanart>
		</assets>
		<news>- add support for searching musicvideos by artist name
- add support for originaltitle search
- add support for tv show actors
- add videoresolution flag</news>
	</extension>
</addon>
<addon id="script.module.pvr.artwork" name="PVR Artwork Module" version="2.2.9" provider-name="PvD">
    <requires>
	    <import addon="xbmc.python" version="3.0.0"/>
        <import addon="script.module.simplecache" version="2.0.2"/>
        <import addon="script.module.requests" version="2.22.0+matrix" />
    </requires>
    <extension point="xbmc.python.module" library="lib" />
    <extension point="xbmc.python.script" library="service.py" />
    <extension point="xbmc.service" library="main.py" />
    <extension point="kodi.context.item" library="addevent.py">
            <menu id="kodi.core.main">
                <item library="service.py" args="call_contextmenu">
                    <label>32065</label>
                    <visible>System.HasAddon(script.module.pvr.artwork) + Skin.HasSetting(Skin_enablePvrArtwork) + [Window.IsActive(MyPVRChannels.xml) | Window.IsActive(MyPVRGuide.xml) | Window.IsActive(MyPVRRecordings.xml) | Window.IsActive(MyPVRTimers.xml) | Window.IsActive(MyPVRSearch.xml)]</visible>
                </item>
            </menu>
    </extension>
    <extension point="xbmc.addon.metadata">
        <summary lang="en">Fetch PVR artwork from folders, libraries and TMDB/fanart.tv</summary>
        <description lang="en">The PVR artwork module for Kodi provides artwork for PVR related content by scraping (and caching) this information from local folders, libraries and TMDB/fanart.tv. This module uses the TMDb API but is not certified by TMDb. API keys for TMDB and fanart.tv required.</description>
        <news/>
        <license>GNU GPL Version 3, 29 June 2007</license>
        <forum/>
        <source>https://github.com/b-jesch/script.module.pvr.artwork</source>
        <platform>all</platform>
		<assets>
			<icon>resources/icon.png</icon>
			<fanart/>
		</assets>
    </extension>
</addon>
<addon id="plugin.video.umbrella" name="Umbrella" provider-name="Umbrella" version="6.7.47">
	<requires>
		<import addon="xbmc.python" version="3.0.0" />
		<import addon="script.module.requests" />
		<import addon="script.module.inputstreamhelper" />
	</requires>
	<extension point="xbmc.python.pluginsource" library="umbrella.py">
		<provides>video</provides>
	</extension>
	<extension point="kodi.context.item">
		<menu id="kodi.core.main">
			<item library="resources\lib\context\addtoLibrary.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Add to Library</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.addtoLibrary)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,season) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\addtoFavourite.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Add/Remove Favourite</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.addtoFavourite)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\artworkCustomize.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Customize Artwork</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.artworkCustomize)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie) | String.IsEqual(ListItem.dbtype,season)]
				</visible>
			</item>
			<item library="resources\lib\context\playTrailer.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Play Trailer</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.playTrailer)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\playTrailerSelect.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Play Trailer (Select)</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.playTrailerSelect)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\traktManager.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Trakt Manager</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.traktManager)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,season) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\mdblistManager.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]MDBList Manager</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.mdblistManager)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\clearProviders.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Clear Providers</label>
				<visible>
					[!String.IsEmpty(Window(home).Property(context.umbrella.clearProviders)) +
					String.StartsWith(ListItem.FolderPath,plugin://plugin.video.umbrella/?action=play) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]] |
					[String.Contains(Container.FolderPath,videodb://) +
					[String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.movieLib.path)) | String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.tvLib.path))] +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]]
				</visible>
			</item>
			<item library="resources\lib\context\clearBookmark.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Clear Item Bookmark</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.clearBookmark)) +
					String.StartsWith(ListItem.FolderPath,plugin://plugin.video.umbrella/?action=play) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					ListItem.IsResumable +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\rescrape.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Rescrape Item</label>
				<visible>
					[!String.IsEmpty(Window(home).Property(context.umbrella.rescrape)) +
					String.StartsWith(ListItem.FolderPath,plugin://plugin.video.umbrella/?action=play) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]]
				</visible>
			</item>
			<item library="resources\lib\context\libMdblistManager.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]MDBList Watchlist Lib</label>
				<visible>
					[String.Contains(Container.FolderPath,videodb://) | String.Contains(Container.ListItem.FolderPath,videodb://)] +
					[String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.movieLib.path)) | String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.tvLib.path))] +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\addLibtoFavourite.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Add/Remove Favourite</label>
				<visible>
					[String.Contains(Container.FolderPath,videodb://) | String.Contains(Container.ListItem.FolderPath,videodb://)] +
					[String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.movieLib.path)) | String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.tvLib.path))] +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\libRescrape.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Rescrape Lib Item</label>
				<visible>
					[String.Contains(Container.FolderPath,videodb://) | String.Contains(Container.ListItem.FolderPath,videodb://)] +
					[String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.movieLib.path)) | String.Contains(Container.ListItem.Path,Window(home).Property(umbrella.tvLib.path))] +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\playFromHere.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Play from here</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.playFromHere)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					String.IsEqual(ListItem.dbtype,episode)
				</visible>
			</item>
			<item library="resources\lib\context\autoPlay.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Auto Play</label>
				<visible>
					String.IsEmpty(Window(home).Property(umbrella.autoPlay.enabled)) +
					!String.IsEmpty(Window(home).Property(context.umbrella.autoPlay)) +
					String.StartsWith(ListItem.FolderPath,plugin://plugin.video.umbrella/?action=play) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\sourceSelect.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Source Select</label>
				<visible>
					!String.IsEmpty(Window(home).Property(umbrella.autoPlay.enabled)) +
					!String.IsEmpty(Window(home).Property(context.umbrella.sourceSelect)) +
					String.StartsWith(ListItem.FolderPath,plugin://plugin.video.umbrella/?action=play) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\findSimilar.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Find Similar</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.findSimilar)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,movie)]
				</visible>
			</item>
			<item library="resources\lib\context\browseSeries.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Browse Series</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.browseSeries)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					[String.IsEqual(ListItem.dbtype,episode) | String.IsEqual(ListItem.dbtype,tvshow)]
				</visible>
			</item>
			<item library="resources\lib\context\browseEpisodes.py">
				<label>$INFO[Window(home).Property(context.umbrella.showUmbrella)]Browse Episodes</label>
				<visible>
					!String.IsEmpty(Window(home).Property(context.umbrella.browseEpisodes)) +
					String.StartsWith(ListItem.path,plugin://plugin.video.umbrella/) +
					String.IsEqual(ListItem.Property(isUmbrella_widget),true) +
					String.IsEqual(ListItem.dbtype,episode)
				</visible>
			</item>
		</menu>
	</extension>
	<extension point="xbmc.service" library="service.py" start="startup" />
	<extension point="xbmc.python.module" library="resources/lib/" />
	<extension point="xbmc.addon.metadata">
		<reuselanguageinvoker>true</reuselanguageinvoker>
		<summary lang="en">[B]Umbrella[/B] - We do not host any of the contents streamed</summary>
		<description lang="en">[B]Umbrella[/B][CR] This addon does not form part of the Kodi Media Centre. Please do not seek assistance with this addon from any of the Official Kodi Support Channels.[CR]The author does not host any of the content in this addon and takes no responsibility for content found. We do not know anything about a lab under Raccoon City. Umbrella is not actually an umbrella and will not shield you from rain.</description>
		<platform>all</platform>
		<license>GNU GENERAL PUBLIC LICENSE. Version 3, 29 June 2007</license>
		<forum />
		<website>https://umbrellaplug.github.io</website>
		<source>https://raw.githubusercontent.com/umbrellaplug/umbrellaplug.github.io/</source>
		<disclaimer lang="en">The author of this addon does not host any of the content which is found and have no affiliation with any of the content providers. This addon simply searches websites for content. Use at your own risk!</disclaimer>
		<assets>
			<icon>icon.png</icon>
		</assets>
		<news>
[B]Update - v6.7.47 - July 1st, 2025[/B]
--[Change] Made changes to Trakt code for time. Thanks kodifitzwell
		</news>
	</extension>

</addon>
<addon id="plugin.video.themoviedb.helper"
version="91.0.1"
name="Trakt Helper"
provider-name="jurialmunkey">
<requires>
  <import addon="xbmc.python" version="3.0.1"/>
  <import addon="script.module.requests" version="2.9.1"/>
  <import addon="script.module.pil" version="1.1.7"/>
  <import addon="script.module.addon.signals" version="0.0.6" />
  <import addon="script.module.jurialmunkey" version="0.2.28" />
  <import addon="script.module.infotagger" version="0.0.5" />
  <import addon="script.module.qrcode" version="6.1.0" />
</requires>
<extension point="xbmc.python.pluginsource" library="resources/plugin.py">
  <provides>video</provides>
</extension>
<extension point="xbmc.python.script" library="resources/script.py" />
<extension point="xbmc.service" library="resources/service.py" />
<extension point="xbmc.python.module" library="resources/modules"/>
<extension point="xbmc.addon.metadata">
  <reuselanguageinvoker>false</reuselanguageinvoker>
  <summary lang="en_GB">TMDb Helper</summary>
  <description lang="en_GB">TMDb Helper 6.9.9</description>/disclaimer>
  <disclaimer lang="en_GB">Data provided by TMDb TVDb MDbList OMDb FanartTV and Trakt. Some of the information is provided by TheTVDB.com. Please consider supporting them. https://thetvdb.com/subscribe</disclaimer>
  <license>GPL-3.0-or-later</license>
  <assets>
    <icon>icon.png</icon>
  </assets>
</extension>
</addon>
<addon id="skin.estuary.modv2" version="21.2.1+omega.22" name="Lumina" provider-name="Guilouz, K21 branch by PvD">
	<requires>
		<import addon="xbmc.python" version="3.0.1"/>
		<import addon="xbmc.gui" version="5.17.0"/>
		<import addon="script.skinshortcuts" version="1.1.3"/>
		<import addon="script.image.resource.select" version="3.0.2"/>
		<import addon="script.module.pvr.artwork" version="2.0.0"/>
		<import addon="resource.images.moviegenreicons.estuarymod" version="1.0.4+matrix"/>
		<import addon="resource.images.studios.white" version="0.0.30"/>
		<import addon="script.embuary.info" version="2.0.8"/>
		<import addon="script.embuary.helper" version="2.0.8"/>
	</requires>
	<extension point="xbmc.gui.skin" debugging="false">
		<res width="1920" height="1440" aspect="4:3" default="false" folder="xml" />
		<res width="1920" height="1280" aspect="3:2" default="false" folder="xml" />
		<res width="1920" height="1200" aspect="16:10" default="false" folder="xml" />
		<res width="2040" height="1080" aspect="17:9" default="false" folder="xml" />
		<res width="1920" height="1080" aspect="16:9" default="true" folder="xml" />
		<res width="2338" height="1080" aspect="19.5:9" default="false" folder="xml" />
 		<res width="2160" height="1080" aspect="18:9" default="false" folder="xml" />
		<res width="2560" height="1080" aspect="21:9" default="false" folder="xml" />
	</extension>
	<extension point="xbmc.service" library="scripts/services.py" visible="!String.IsEmpty(Window(home).Property(CurrentSkin))" />
	<extension point="xbmc.python.script" library="scripts/helpers.py" />
	<extension point="kodi.context.item">
      	<menu id="kodi.core.main">
      		<item library="scripts/context_menu_jumptoletter.py">
			<label>$LOCALIZE[31365]</label>
			<visible>!String.IsEmpty(Window(home).Property(CurrentSkin)) + [String.IsEqual(ListItem.dbtype,movie) | String.IsEqual(ListItem.dbtype,set) | String.IsEqual(ListItem.dbtype,tvshow) | String.IsEqual(ListItem.dbtype,artist) | String.IsEqual(ListItem.dbtype,album) | String.IsEqual(ListItem.dbtype,musicvideo) | Container.Content(addons)] + !Window.IsVisible(Home)</visible>
		</item>
      		<item library="scripts/context_menu_moviessets.py">
			<label>$LOCALIZE[31381]</label>
			<visible>!String.IsEmpty(Window(home).Property(CurrentSkin)) + String.IsEqual(ListItem.DBType,set) + !Window.IsVisible(Home)</visible>
		</item>
    	</menu>
 	</extension>
	<extension point="xbmc.addon.metadata">
		<summary lang="en_GB">Estuary MOD V2 skin by Guilouz, adapted for Omega by PvD</summary>
		<description lang="en_GB">Estuary MOD V2 is a mod from Estuary by Guilouz for Kodi 18 and adapted for Kodi 21 (Omega) by PvD from Kodinerds Community. It attempts to be easy for first time Kodi users to understand and use.</description>
		<disclaimer lang="en_GB">For better experience, be sure to install all addons required by the skin.</disclaimer>
		<platform>all</platform>
		<license>CC BY-SA 4.0, GNU GENERAL PUBLIC LICENSE Version 2.0</license>
		<source>https://github.com/b-jesch/skin.estuary.modv2/tree/Omega</source>
			<assets>
				<icon>resources/icon.png</icon>
				<fanart>resources/fanart.jpg</fanart>
				<screenshot>resources/screenshots/screenshot_1.png</screenshot>
				<screenshot>resources/screenshots/screenshot_2.png</screenshot>
				<screenshot>resources/screenshots/screenshot_5.png</screenshot>
				<screenshot>resources/screenshots/screenshot_7.png</screenshot>
				<screenshot>resources/screenshots/screenshot_8.png</screenshot>
				<screenshot>resources/screenshots/screenshot_9.png</screenshot>
				<screenshot>resources/screenshots/screenshot_10.png</screenshot>
				<screenshot>resources/screenshots/screenshot_13.png</screenshot>
				<screenshot>resources/screenshots/screenshot_14.png</screenshot>
				<screenshot>resources/screenshots/screenshot_15.png</screenshot>
			</assets>
        <news>
For a complete view of changes visit https://github.com/b-jesch/skin.estuary.modv2/tree/Omega
        </news>
	</extension>
</addon>
﻿
<addon id="resource.images.moviegenreicons.estuarymod" name="Movie Genres Icons for Estuary MOD V2 Matrix" version="1.0.4" provider-name="Guilouz">
	<extension point="kodi.resource.images" compile="true" type="moviegenreicons" />
	<requires>
		<import addon="kodi.resource" version="1.0.0"/>
		<import addon="xbmc.python" version="3.0.0" />
	</requires>
	<extension point="xbmc.addon.metadata">
		<summary lang="en">Movie genres icons Pack for Estuary MOD V2</summary>
		<description lang="en">Movie genres icons Pack.</description>
		<summary lang="fr">Pack d'icônes de genres vidéos pour Estuary MOD V2</summary>
		<description lang="fr">Pack d'icônes de genres vidéos.</description>
		<platform>all</platform>
		<source>https://github.com/Guilouz/resource.images.moviegenreicons.estuarymod</source>
		<assets>
			<icon>resources_/icon.png</icon>
			<fanart>resources_/fanart.jpg</fanart>
			<screenshot>resources_/screenshot-01.jpg</screenshot>
			<screenshot>resources_/screenshot-02.jpg</screenshot>
			<screenshot>resources_/screenshot-03.jpg</screenshot>
		</assets>
		<news>[B]1.0.4[/B][CR]• Fix accented characters[CR][CR][B]1.0.3[/B][CR]• Fix accented characters[CR][CR][B]1.0.2[/B][CR]• Remove Textures.xbt[CR][CR][B]1.0.1[/B][CR]• Add Spanish genres[CR][CR][B]1.0.0[/B][CR]• Initial release[CR][CR]</news>
	</extension>
</addon>
<addon id="service.subtitles.a4ksubtitles"
       name="a4kSubtitles"
       version="3.21.1"
       provider-name="Unknown">
    <requires>
      <import addon="script.module.requests"/>
      <import addon="vfs.libarchive" optional="true"/>
    </requires>
    <extension point="xbmc.subtitle.module" library="main.py"/>
    <extension point="xbmc.service" library="main_service.py" />
    <extension point="xbmc.addon.metadata">
        <summary lang="en">a4kSubtitles - Multi-Source Subtitles Addon</summary>
        <description>
Multi-source subtitles addon optimized for Seren and a4kScrapers.
Supports: OpenSubtitles, BSPlayer, Podnadpisi.NET, SubDL, Addic7ed
        </description>
        <platform>all</platform>
        <reuselanguageinvoker>true</reuselanguageinvoker>
        <license>MIT License</license>
        <website>https://github.com/newt-sc/a4kSubtitles</website>
        <source>https://github.com/newt-sc/a4kSubtitles</source>
        <assets>
            <icon>icon.png</icon>
            <screenshot>screenshot-01.png</screenshot>
            <screenshot>screenshot-02.png</screenshot>
            <screenshot>screenshot-03.png</screenshot>
        </assets>
    <news>
[v3.21.1]:
  * Dynamic AI subtitles translation from English to the selected Preferred Language in KODI's settings
    * Requires API Key
    * Currently only OpenAI and NexosAI backends are supported
    * For NexosAI model should be specified by ID, not name
    * Turning AI translation on - disables usage of embedded subtitles
    * Currently only supported when using auto-search or auto-download feature

[v3.20.0]:
  * Auto download/selection improvements (by bbviking)

[v3.19.1]:
  * Parse subtitles version

[v3.19.0]:
  * Lower OpenSubtitles token cache from 7 days to 1 day
  * Fix auto download stopping after first failed subtitle download
  * Fix wrong language set for results when multiple languages are configured (Thanks to @peno64)

[v3.18.3]:
  * Auto Download: Fix selecting incorrect episode in archive file

[v3.18.2]:
  * SubSource: Fix foreign languages

[v3.18.1]:
  * Fix IMDB ID not found

[v3.18.0]:
  * Use the newer InfoTagVideo KODI API (contributed by @kiamvdd)

[v3.17.0]:
  * Fix: TV year being pulled incorrectly
  * Fix: File name issues in both temp and media directories
  * Fix: Subtitle file missing extension
  * Fix: Incorrect episode selection when downloaded archive contains multiple subtitles
  * Fix: Auto-download not working after the first selected episode in the playlist (A4K only works for the first media)
  * Fix: Subtitle import issue due to "illegal characters"
  * Improve: determination of subtitle episodes
  * Improve: results parsing
  * Feature: Auto-download now copies subtitles next to the video or to a custom location, based on Kodi's subtitle storage mode path
  * SubSource: Now supports series in "absolute order", as used by some anime websites
  * SubSource: Fixed issue of duplicated subtitle IDs with different names

[v3.16.1]:
  * Fix addons.xml.crc  

[v3.16.0]:
  * Fix subtitle international characters encoding
  * Add SubSource

[v3.15.0]:
  * Remove Subscene
  * Add SubDL

[v3.14.0]:
  * Handle invalid `VideoPlayer.IMDBNumber` meta

[v3.13.0]:
  * Show proper error message of wrong username for OpenSubtitles

[v3.12.0]:
  * Fix OpenSubtitles not working for titles with IMDB ID less than 1_000_000

[v3.11.0]:
  * Fix auto-selection and add debug logs.

[v3.10.0]:
  * Small fix in SDH vs Forced flags checking.

[v3.9.0]:
  * Improve SDH and Forced preferences handling.

[v3.8.0]:
  * Switch to new OpenSubtitles API.
    Note: username and password are now mandatory for using OpenSubtitles.
  * Fixes for Brazilian Portuguese language codes handling.

[v3.7.0]:
  * New option to auto-select and enable embedded subtitles (was previously always enabled)
  * New option to prefer Forced subtitles on auto selection (was previously always enabled)
  * New option to prefer SDH subtitles on auto selection

[v3.6.0]:
  * Use group of title matches in the results ordering

[v3.5.0]:
  * URI decode result names

[v3.4.0]:
  * Improve results ordering

[v3.3.0]:
  * Improve Subscene support

[v3.2.0]:
  * Option to disable subs encoding detection

[v3.1.0]:
  * Force proper embedded subs selection based on preferred language overriding KODI
  * Subs encoding fallback to predefined list in case auto detection fails

[v3.0.0]:
  * Use cf bypass for Subscene
  * Auto-detect subs encoding and convert to utf-8

[v2.8.0]:
  * Support tvshows with more than 250 episodes for episode id lookup when tvshow imdb id is provided.

[v2.7.0]:
  * Support tvshow imdb id, along with season and episode passed from video file url.

[v2.6.0]:
  * Support imdb id (movie or episode) passed from video file url.

[v2.5.0]:
  * Add TLS adapter fallback

[v2.4.0]:
  * Fix some ssl issues

[v2.3.0]:
  * Add concurrency error handling

[v2.2.0]:
  * Fix KODI 19 Matrix support

[v2.1.0]:
  * Fix Persian search in Subscene

[v2.0.0]:
  * Use IMDb as main source for all meta.
  * Retry on 503 (Service Unavailable). OpenSubtitles and Subscene seems to return it occasionally.

[v1.8.0]:
  * Remove SubDb (Site is down)
  * Make lib vfs optional since there are fallbacks and it is used as last case scenario. Thus making the addon installable on platforms which are not supported by lib vfs.

[v1.7.2]:
  * Improve results sort based on title match

[v1.7.1]:
  * Drop python meta as it prevents installations on pre Kodi 19 versions

[v1.7.0]:
  * Update python meta to enable Kodi 19 installations

[v1.6.0]:
  * Add option to auto download first subtitle result silently

[v1.5.0]:
  * Auto open search dialog only on movie and tvshow videos

[v1.4.0]:
  * Add option to auto open the search dialog when the video does not have subtitles

[v1.3.0]:
  * Improve tvshow year scraping

[v1.2.0]:
  * Use internal ZipFile for extraction with a fallback to vfs.libarchive

[v1.1.0]:
  * Improve imdb id scraping

[v1.0.1]:
  * Add screenshots

[v1.0.0]:
  * Invalidate BSPlayer results cache when download links expire
  * Extraction fallback: zip -> gzip -> raw

[v0.0.30]:
  * Add service names in ad detection
  * Removed the option to disable cleaning of ads
  * Add remote fetching of addic7ed data

[v0.0.29]:
  * Fix Podnadpisi download of results missing filename meta
  * Fix last results cache not invalidated on language preferences change

[v0.0.28]:
  * Attempt scrape of imdb id when missing
  * Improve filename parsing
  * Fix SubDB lang code
  * Fix Podnadpisi not returning release name

[v0.0.27]:
  * Attempt to auto-fix a garbled cyrillic encoded subtitles
  * Fix more encoding issues
  * Ensure progress dialog close even if the addon crashes
  * Apply color to service name in results and bold tags
  * Show notification if imdb id is missing

[v0.0.26]:
  * Support for Addic7ed
  * Improve cache of the last results
  * Don't show progress when showing results from cache

[v0.0.25]:
  * Fix cancellation thread exit

[v0.0.24]:
  * Show progress dialog only for search

[v0.0.23]:
  * Add progress dialog
  * Support cancellation

[v0.0.22]:
  * Fix meta string conversion issue

[v0.0.21]:
  * TVShow year scrape from imdb when necessary

[v0.0.20]:
  * Improve Subscene tvshow matching
  * Extract first sub file from zips when none is matched
  * Fix Podnadpisi not working properly for tvshows
  * Fix non-ascii video file title issues
  * Add tvshow tests

[v0.0.19]:
  * Update settings
  * Fix language code suffix format in the subtitle file name
  * Support for Subscene

[v0.0.18]:
  * Support for Podnadpisi.NET
  * Support for SubDB

[v0.0.17]:
  * Reuse KODI's Python language invoker
    * Improves performance on low-end devices when switching subtitles for best match
  * Url decode subtitle names

[v0.0.16]:
  * Cache last result
  * OpenSubtitles always queries:
    * by imdb id and title
    * by video file hash
  * Improve results ordering:
    * preferred lang
    * lang
    * synced
    * name match
    * rating
    * hearing impaired
    * subtitle service
  * Fix url with numbers matching in ads detection

[v0.0.15]:
  * Remove ads by default
  * Support for BSPlayer
  * Additional option for OpenSubtitles to use file hash (Limits results to exact matches)

[v0.0.14]:
  * Fix API and normal usage at the same time

[v0.0.13]:
  * Exclude development files from release

[v0.0.12]:
  * Removal of ads (Experimental)
  * Fix extract issue when file contains unicode symbols

[v0.0.11]:
  * Changelog in KODI

[v0.0.10]:
  * Inserted language code in sub filename

[v0.0.9]:
  * Implemented (orginal, default, none, forced_only) as KODI language setting
  * Fixed minor bugs in API implementation
  * Added .idea folder to .gitignore

[v0.0.8]:
  * opensubtitles should make max 2 requests for separate languages
  * lint updates
  * add tests for download

[v0.0.7]:
  * API class rename

[v0.0.6]:
  * fix core requiring handle even with API usage

[v0.0.5]:
  * expose API for usage without KODI
  * add tests for search

[v0.0.4]:
  * distribution process:
    * KODI repository with updates based on github releases
    * addons.xml and addons.xml.crc auto generation via git hooks
    * release automation on merge to master via Github Actions

[v0.0.3]:
  * general settings for configuring requests timeout and results limit
  * additional ordering of the results depending on the similarity ratio of the video file name and the subtitle file name

[v0.0.2]:
  * improve archive extraction support
  * limit the results and add requests timeout
  * fix OpenSubtitles authentication
  * handle debug logging detection issues

[v0.0.1]:
  * initial working version (search and download subtitles)
  * OpenSubtitles support with optional authentication
  * results ordering with preferred language ordered first
        </news>
    </extension>
</addon>
<addon id="script.module.requests" name="requests" version="2.31.0" provider-name="Python Software Foundation">
  <requires>
    <import addon="xbmc.python" version="3.0.0"/>
    <import addon="script.module.certifi" version="2023.5.7"/>
    <import addon="script.module.chardet" version="5.1.0"/>
    <import addon="script.module.idna" version="3.4.0"/>
    <import addon="script.module.urllib3" version="1.26.16+matrix.1"/>
  </requires>
  <extension point="xbmc.python.module" library="lib" />
  <extension point="xbmc.addon.metadata">
    <summary lang="en_GB">Requests is an elegant and simple HTTP library for Python, built for human beings.</summary>
    <description lang="en_GB">Requests is an elegant and simple HTTP library for Python, built for human beings.</description>
    <license>Apache-2.0</license>
    <platform>all</platform>
    <website>https://requests.readthedocs.io/</website>
    <source>https://github.com/psf/requests</source>
    <assets>
      <icon>resources/icon.png</icon>
    </assets>
  </extension>
</addon>
</addons>